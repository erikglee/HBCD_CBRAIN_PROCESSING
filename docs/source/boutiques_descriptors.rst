.. HBCD_CBRAIN_PROCESSING documentation master file, created by
   sphinx-quickstart on Wed Jun  5 10:48:12 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Understanding Boutiques Descriptors
===================================

`Boutiques descriptors <https://arxiv.org/abs/1711.09713>`_ are
flexible JSON-based instructions that describe how a containerized
application can be interacted with. For example, this includes descriptions
of the expected inputs and outputs for a pipeline, and the arguments
that can be used to configure processing. 

Boutiques descriptors are how CBRAIN can create a consistent interface
interacting with a wide variety of pipelines. On the CBRAIN web-interface,
the options for processing are automatically configured in a convenient way
for users via utilities like drop-down menus, text fields, and check-boxes.
Because of the complexity and scale of HBCD processing, we instead interact
with CBRAIN (and the Boutiques descriptors within CBRAIN) via CBRAIN's API
interface. In either case, the "descriptor" for a given tool will determine
how arguments from a user are conveyed to a container for processing purposes.

In this section of the documentation, we describe some of the relevant details
of Boutiques descriptors that are useful for understanding HBCD processing.
Other details can also be found in the Boutiques `publication <https://arxiv.org/abs/1711.09713>`_ 
and `webpage <https://boutiques.github.io/>`_.

First, at the top-level of a Boutiques descriptor, there are a few key fields
that describe the tool itself. These include: ::
    - name (str): The name of the tool.
    - description (str): A description of the tool.
    - tool-version (str): The version of the tool for display in CBRAIN
    - container-image (str): A field with sub-fields that describe where the container lives

Next are details that are more closely related to how the tool operates. All arguments (including
both groups of input and output files) will be specified in the "inputs" section. Arguments can
have default values, be required or optional, and can represent a number of data types including
strings, numbers, and files.

The "inputs" to a pipeline take there form via the "command-line" section. When
CBRAIN is setting up a processing job for a given subject and pipeline, CBRAIN
first sets up a single directory that contain all the input/output folders
needed during processing (more on that later), and then CBRAIN will shell
into the container. The "command-line" section then specifies the command that
will be run inside of the container.

Often times there are certain manipulations that will be made to the input/output files
to facilitate processing. If this is the case, the "command-line" text may either start
or end with commands that facilitate these manipulations. For example, if CBRAIN needs
to create working or output directories on behalf of the pipeline, the "command-line"
text may look as follows: ::

    "command-line": "mkdir -p work out; pipeline_name [Arg1] [Arg2]"

In the above example, the directories "work" and "out" would be first created. Following
this, the hypothetical pipeline would be run by calling "pipeline_name" which refers to
a command that exists in the container. Most containers have commands on the PATH that
can be directly called in this way. Then following "pipeline_name" are [Arg1] and [Arg2]
which correspond to arguments that have been defined in the "inputs" section of the descriptor.
During processing, [Arg1] and [Arg2] would be expanded into text that represents positional arguments,
or flags depending on the specific type of argument.

The "output-files" section of the descriptor will describe the files or folders that are expected to
be generated by the pipeline. Included for each output file is a "path-template" field that describes
the expected path of the file in the processing directory. After processing is complete, CBRAIN will
save any files mentioned in the "output-files" section to the appropriate Data Provider (which in HBCD's
case is a path on a S3 bucket). The "BoutiquesForcedOutputBrowsePath" will determine where the individual
outputs are placed relative to the root path of the Data Provider. In general, outputs will be routed
to output folders that represent the name of the pipeline that was used to generate the data. And the output
elements being saved generally are folders with the name of the subject being processed, or HTML reports
that contain the name of the subject being processed.

.... insert details about how CBRAIN sets up the processing directory here ....
